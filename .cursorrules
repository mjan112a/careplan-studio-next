# Cursor AI Rules

## Runtime Environment
DECISION: Use Node.js Runtime instead of Edge Runtime for all server-side code.
- All middleware and API routes should use `export const runtime = 'nodejs'`
- No Edge Runtime specific code patterns should be used
- Full Node.js API access is available and encouraged

## Logging Standards
DECISION: Use chalk-based colorful logging with full stack trace support.
- When generating code, add INFO logs for key events in the code.
- When in scope of important routines/components add key identifiers to context.

IMPLEMENTATION:
```typescript
import { logger } from '@/lib/logging';

// Correct usage patterns:
logger.info('Operation completed');
logger.debug('Processing request', { contextData: 'value' });
logger.error('Operation failed', { error: error.message });

// Do NOT use:
console.log();  // Use logger instead
console.error();  // Use logger instead
```

## Code Generation Guidelines
When generating code:
1. Always use the logger for any logging operations
2. Include appropriate error handling with logger.error calls
3. Use Node.js APIs freely - no need to check for Edge Runtime compatibility
4. Include stack traces in error logging
5. Add context logging for important operations
6. Use typescript strict mode
7. Follow the existing color scheme in logger output

## File Organization
- ADRs go in `docs/adr/`
- Library code goes in `lib/`
- Components go in `components/`
- Pages go in `app/`
- Utilities go in `utils/`

## Error Handling Pattern
```typescript
try {
  // operation
} catch (error) {
  logger.error('Operation failed', {
    error: error instanceof Error ? error.message : String(error),
    stack: error instanceof Error ? error.stack : undefined,
    context: { /* relevant operation context */ }
  });
  throw error; // or handle appropriately
}
```

## Middleware Pattern
```typescript
export const runtime = 'nodejs';  // Always include this

export async function middleware(req: NextRequest) {
  try {
    // middleware logic
  } catch (error) {
    logger.error('Middleware error', {
      error: error instanceof Error ? error.message : String(error),
      path: req.nextUrl.pathname
    });
    // handle error appropriately
  }
}
```

## TypeScript and Module Standards
DECISION: Use strict TypeScript with modern ES Module patterns.
- Always use type-safe code with explicit types
- Use ES Module import/export syntax
- Leverage path aliases with '@/' prefix
- Handle JSON imports with type safety

IMPLEMENTATION:
```typescript
// Correct import patterns:
import { type MyType } from '@/types';
import { myFunction } from '@/lib/utils';
import data from '@/data/config.json';

// Correct type usage:
interface Props {
  data: MyType;
}

// Correct error handling:
const result = await someOperation() as Result;
if (!isValidResult(result)) {
  throw new TypeError('Invalid result format');
}
```

## Module Resolution Rules
- Always use relative paths for local imports
- Use '@/' alias for imports from project root
- Explicitly type all module imports
- Handle dynamic imports with type safety:
```typescript
const MyComponent = dynamic(() => import('@/components/MyComponent'), {
  loading: () => <LoadingSpinner />,
}) as ComponentType<Props>;
```

## Cross-Platform Compatibility
- Use path.join() for file paths
- Handle file extensions explicitly
- Use cross-platform line endings
- Ensure case sensitivity in imports 

## React and Next.js Patterns
DECISION: Use React 19 with Next.js App Router and Server Components by default.
- Use 'use client' directive for client components
- Prefer Server Components unless client interactivity needed
- Use Next.js built-in optimizations (Image, Link, etc.)
- Enable experimental features for build optimization

IMPLEMENTATION:
```typescript
// Server Component (default)
export default function ServerComponent() {
  return <div>Server Rendered</div>
}

// Client Component
'use client';
export default function ClientComponent() {
  const [state, setState] = useState(null);
  return <div>Client Interactive</div>
}
```

## UI Framework Standards
DECISION: Use Radix UI primitives with Tailwind CSS.
- Use shadcn/ui component patterns
- Follow Tailwind class ordering conventions
- Implement responsive design patterns
- Ensure accessibility standards

IMPLEMENTATION:
```typescript
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

export function Component() {
  return (
    <Card className="p-4 space-y-4">
      <Button variant="primary">Action</Button>
    </Card>
  );
}
```

## Database and Authentication
DECISION: Use Supabase with SSR authentication.
- Use type-safe database queries
- Implement row-level security
- Handle auth state server-side
- Use environment variables for configuration

IMPLEMENTATION:
```typescript
import { createServerClient } from '@/lib/supabase/server';

export async function getData() {
  const supabase = createServerClient();
  const { data, error } = await supabase
    .from('table')
    .select('*')
    .throwOnError();
  return data;
}
```

## Package Management and Build
DECISION: Use pnpm with strict versioning.
- Lock all dependency versions
- Use workspace features for monorepo
- Enable build optimizations
- Follow Node.js LTS version

IMPLEMENTATION:
```json
{
  "dependencies": {
    "next": "15.2.4",
    "react": "^19",
    "typescript": "^5"
  },
  "engines": {
    "node": ">=18.17.0"
  }
}
``` 